(load "eliza_util")
(defconstant dash_label "-------------")


(defun load_words_file(filename)
	(mapcar #'flatten (parse_line (read_file filename)))
	;(parse_line2 (read_file filename) '(1  2 3))
)

(defun read_file(filename)
	;(setf ht (make-hash-table))
	;(setf this_label "")
	(with-open-file (stream filename)
		 (loop for line = (read-line stream nil 'foo)
				   until (eq line 'foo)
				   	;if (not (eq ( is_label  line) nil ))
					;do (
				;		(setf this_label (is_label line) )
					;	(setf (gethash this_label ht) '(a))	
					;)
					;else do(
						;(setf (gethash this_label ht) (cons line (gethash this_label ht)))	
					;)
				collect  line
		 )
	)
)

;	(defun parse_line2(list_in list_out)
;		(if (not (null list_in))
;			(let* ((first_list (first list_in ))(rest_list (rest list_in))(label (is_label first_list)))
;				(print first_list)
;				(if (not (eq label nil))
;					(cons label (parse_line2 rest_list list_out))
;					(parse_line2 rest_list list_out)
;				)
;			)
;		)
;		nil
;	)

(defun parse_line(list_in )
	(if (not (null list_in))
		(let* ((first_list (first list_in ))(rest_list (rest list_in))(label (is_label first_list)))
			;(print first_list)
			(if (not (eq label nil))
				(cons (cons (string_to_list label) (parse_line_aux rest_list)) (parse_line rest_list))
				(parse_line rest_list)
			)
		)
	)
)

(defun parse_line_aux(list_in )
	(if (not (null list_in))
		(let* ((first_list (first list_in ))(rest_list (rest list_in))(label (is_label first_list)))
			;(print first_list)
			(if (eq label nil)
				(cons (string_to_list first_list) (parse_line_aux rest_list))
				(parse_line_aux rest_list )
			)
		)
	)
) 


(defun is_label(str_in)
	(if (> (length str_in) (length dash_label))
		(let* ((pos_start (length dash_label))
				(pos_end (search dash_label str_in :start2 pos_start))
			)
			;(print (length str_in))
			;(print (length dash_label))
			(if (not (eq pos_end nil))
				(subseq str_in pos_start pos_end)
			)
		)
	)
)

(defun str_replace(str s r)
		(let* ((pos_start (length dash_label))
				(pos_end (search dash_label str_in :start2 pos_start))
			)
			;(print (length str_in))
			;(print (length dash_label))
			(if (not (eq pos_end nil))
				(subseq str_in pos_start pos_end)
			)
		)
)
